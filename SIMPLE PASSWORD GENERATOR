import random
import string
import os

class PasswordGenerator:
    def __init__(self):
        self.last_passwords = []
    
    def clear_screen(self):
        """Clear the console screen."""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def generate_password(self, length=12, include_uppercase=True, include_lowercase=True, 
                         include_digits=True, include_symbols=True):
        """Generate a random password with specified criteria."""
        characters = ""
        
        if include_lowercase:
            characters += string.ascii_lowercase
        if include_uppercase:
            characters += string.ascii_uppercase
        if include_digits:
            characters += string.digits
        if include_symbols:
            characters += "!@#$%^&*()_+-=[]{}|;:,.<>?"
        
        if not characters:
            return None
        
        password = ''.join(random.choice(characters) for _ in range(length))
        return password
    
    def display_header(self):
        """Display the program header."""
        print("="*60)
        print("           PASSWORD GENERATOR")
        print("="*60)
    
    def display_menu(self):
        """Display the main menu."""
        print("\nMAIN MENU:")
        print("-" * 30)
        print("1. Generate Single Password")
        print("2. Generate Multiple Passwords")
        print("3. Custom Password Settings")
        print("4. View Last Generated Passwords")
        print("5. Password Strength Tips")
        print("6. Clear Screen")
        print("7. Exit")
        print("-" * 30)
    
    def get_password_settings(self):
        """Get custom password settings from user."""
        print("\nÔ∏è  CUSTOM PASSWORD SETTINGS")
        print("-" * 30)
        
        try:
            length = int(input("Password length (8-128): "))
            if length < 8 or length > 128:
                print(" Length must be between 8 and 128")
                return None
        except ValueError:
            print(" Invalid input for length")
            return None
        
        print("\nInclude character types:")
        uppercase = input("Include UPPERCASE letters? (y/n): ").lower().startswith('y')
        lowercase = input("Include lowercase letters? (y/n): ").lower().startswith('y')
        digits = input("Include digits (0-9)? (y/n): ").lower().startswith('y')
        symbols = input("Include symbols (!@#$...)? (y/n): ").lower().startswith('y')
        
        if not any([uppercase, lowercase, digits, symbols]):
            print(" At least one character type must be selected")
            return None
        
        return {
            'length': length,
            'include_uppercase': uppercase,
            'include_lowercase': lowercase,
            'include_digits': digits,
            'include_symbols': symbols
        }
    
    def generate_single_password(self):
        """Generate and display a single password."""
        print("\n GENERATE SINGLE PASSWORD")
        print("-" * 30)
        
        try:
            length = int(input("Enter password length (default 12): ") or "12")
            if length < 1:
                print(" Length must be positive")
                return
        except ValueError:
            print(" Invalid length, using default (12)")
            length = 12
        
        password = self.generate_password(length)
        if password:
            print(f"\n Generated Password: {password}")
            self.last_passwords.append(password)
            if len(self.last_passwords) > 10:  # Keep only last 10
                self.last_passwords.pop(0)
        else:
            print(" Error generating password")
    
    def generate_multiple_passwords(self):
        """Generate and display multiple passwords."""
        print("\n GENERATE MULTIPLE PASSWORDS")
        print("-" * 30)
        
        try:
            count = int(input("How many passwords? (1-20): "))
            if count < 1 or count > 20:
                print(" Count must be between 1 and 20")
                return
            
            length = int(input("Password length (default 12): ") or "12")
            if length < 1:
                print(" Length must be positive")
                return
        except ValueError:
            print(" Invalid input")
            return
        
        print(f"\n Generated {count} passwords:")
        print("-" * 40)
        
        new_passwords = []
        for i in range(count):
            password = self.generate_password(length)
            if password:
                print(f"{i+1:2d}. {password}")
                new_passwords.append(password)
        
        self.last_passwords.extend(new_passwords)
        if len(self.last_passwords) > 10:
            self.last_passwords = self.last_passwords[-10:]
    
    def custom_password_generation(self):
        """Generate password with custom settings."""
        print("\n CUSTOM PASSWORD GENERATION")
        print("-" * 30)
        
        settings = self.get_password_settings()
        if not settings:
            return
        
        try:
            count = int(input("\nHow many passwords? (default 1): ") or "1")
            if count < 1 or count > 20:
                print(" Count must be between 1 and 20")
                return
        except ValueError:
            count = 1
        
        print(f"\n Generated {count} custom password(s):")
        print("-" * 40)
        
        new_passwords = []
        for i in range(count):
            password = self.generate_password(**settings)
            if password:
                print(f"{i+1:2d}. {password}")
                new_passwords.append(password)
        
        self.last_passwords.extend(new_passwords)
        if len(self.last_passwords) > 10:
            self.last_passwords = self.last_passwords[-10:]
    
    def view_last_passwords(self):
        """Display the last generated passwords."""
        print("\n LAST GENERATED PASSWORDS")
        print("-" * 30)
        
        if not self.last_passwords:
            print("No passwords generated yet.")
            return
        
        for i, password in enumerate(self.last_passwords, 1):
            print(f"{i:2d}. {password}")
    
    def show_password_tips(self):
        """Display password strength tips."""
        print("\n PASSWORD STRENGTH TIPS")
        print("-" * 30)
        print(" Use at least 12 characters")
        print(" Mix uppercase and lowercase letters")
        print(" Include numbers and symbols")
        print(" Avoid dictionary words")
        print(" Don't reuse passwords")
        print(" Use a password manager")
        print(" Enable two-factor authentication")
        print("\n Strong Password Example:")
        example = self.generate_password(16)
        print(f"   {example}")
    
    def run(self):
        """Main program loop."""
        while True:
            self.display_header()
            self.display_menu()
            
            try:
                choice = input("\nEnter your choice (1-7): ").strip()
                
                if choice == '1':
                    self.generate_single_password()
                elif choice == '2':
                    self.generate_multiple_passwords()
                elif choice == '3':
                    self.custom_password_generation()
                elif choice == '4':
                    self.view_last_passwords()
                elif choice == '5':
                    self.show_password_tips()
                elif choice == '6':
                    self.clear_screen()
                    continue
                elif choice == '7':
                    print("\n Thank you for using Password Generator!")
                    print("Stay secure! ")
                    break
                else:
                    print(" Invalid choice. Please select 1-7.")
                
                input("\nPress Enter to continue...")
                
            except KeyboardInterrupt:
                print("\n\n Goodbye!")
                break
            except Exception as e:
                print(f" An error occurred: {e}")
                input("\nPress Enter to continue...")

# Run the program
if __name__ == "__main__":
    generator = PasswordGenerator()
    generator.run()
